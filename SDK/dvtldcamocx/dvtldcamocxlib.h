/****************************************************************************
**
** Namespace DVTLDCamOCXLib generated by dumpcpp v5.15.2 using
** d:\qt\5.15.2\msvc2019\bin\dumpcpp.exe {01E21292-EE9C-4DFB-B436-B4BE239D794A}
** from the type library D:\DVTLiveDetect\DvtLivedetect\DVTLDCamOCX.ocx
**
****************************************************************************/

#ifndef QAX_DUMPCPP_DVTLDCAMOCXLIB_H
#define QAX_DUMPCPP_DVTLDCAMOCXLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef DVTLDCAMOCXLIB_EXPORT
#define DVTLDCAMOCXLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace DVTLDCamOCXLib {


class DVTLDCAMOCXLIB_EXPORT _DDVTLDCamOCX : public QAxObject
{
public:
    explicit _DDVTLDCamOCX(IDispatch *subobject = nullptr, QAxObject *parent = nullptr);
    /*
    Method AboutBox
    */
    inline void AboutBox();

    /*
    Method CloseCamera
    */
    inline int CloseCamera();

    /*
    Method EndLiveDectection
    */
    inline int EndLiveDectection();

    /*
    Method FaceCompareByImage
    */
    inline double FaceCompareByImage(const QString& szFileName1, const QString& szFileName2);

    /*
    Method GetImageData
    */
    inline QString GetImageData(int iDataClass);

    /*
    Method GetProduct
    */
    inline QString GetProduct();

    /*
    Method GetVersion
    */
    inline QString GetVersion();

    /*
    Method OpenCamera
    */
    inline int OpenCamera();

    /*
    Method SnapshotImage
    */
    inline QString SnapshotImage();

    /*
    Method StartLiveDetection
    */
    inline int StartLiveDetection(int timeout);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

// skipping event interface _DDVTLDCamOCXEvents

// Actual coclasses
class DVTLDCAMOCXLIB_EXPORT DVTLDCamOCX : public QAxWidget
{
public:
    explicit DVTLDCamOCX(QWidget *parent = nullptr, Qt::WindowFlags f = {});
    DVTLDCamOCX(_DDVTLDCamOCX *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method AboutBox
    */
    inline void AboutBox();

    /*
    Method CloseCamera
    */
    inline int CloseCamera();

    /*
    Method EndLiveDectection
    */
    inline int EndLiveDectection();

    /*
    Method FaceCompareByImage
    */
    inline double FaceCompareByImage(const QString& szFileName1, const QString& szFileName2);

    /*
    Method GetImageData
    */
    inline QString GetImageData(int iDataClass);

    /*
    Method GetProduct
    */
    inline QString GetProduct();

    /*
    Method GetVersion
    */
    inline QString GetVersion();

    /*
    Method OpenCamera
    */
    inline int OpenCamera();

    /*
    Method SnapshotImage
    */
    inline QString SnapshotImage();

    /*
    Method StartLiveDetection
    */
    inline int StartLiveDetection(int timeout);

// meta object functions
    static const QMetaObject staticMetaObject;
    const QMetaObject *metaObject() const override { return &staticMetaObject; }
    void *qt_metacast(const char *) override;
};

// member function implementation
#ifndef QAX_DUMPCPP_DVTLDCAMOCXLIB_NOINLINES
inline void _DDVTLDCamOCX::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int _DDVTLDCamOCX::CloseCamera()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int _DDVTLDCamOCX::EndLiveDectection()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline double _DDVTLDCamOCX::FaceCompareByImage(const QString& szFileName1, const QString& szFileName2)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&szFileName1, (void*)&szFileName2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString _DDVTLDCamOCX::GetImageData(int iDataClass)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iDataClass};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString _DDVTLDCamOCX::GetProduct()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString _DDVTLDCamOCX::GetVersion()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline int _DDVTLDCamOCX::OpenCamera()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QString _DDVTLDCamOCX::SnapshotImage()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline int _DDVTLDCamOCX::StartLiveDetection(int timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}


inline void DVTLDCamOCX::AboutBox()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline int DVTLDCamOCX::CloseCamera()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline int DVTLDCamOCX::EndLiveDectection()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline double DVTLDCamOCX::FaceCompareByImage(const QString& szFileName1, const QString& szFileName2)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&szFileName1, (void*)&szFileName2};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline QString DVTLDCamOCX::GetImageData(int iDataClass)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&iDataClass};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline QString DVTLDCamOCX::GetProduct()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline QString DVTLDCamOCX::GetVersion()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline int DVTLDCamOCX::OpenCamera()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline QString DVTLDCamOCX::SnapshotImage()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline int DVTLDCamOCX::StartLiveDetection(int timeout)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&timeout};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<DVTLDCamOCXLib::_DDVTLDCamOCX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DVTLDCamOCXLib::_DDVTLDCamOCX*>(t)->DVTLDCamOCXLib::_DDVTLDCamOCX::~_DDVTLDCamOCX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DVTLDCamOCXLib::_DDVTLDCamOCX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DVTLDCamOCXLib::_DDVTLDCamOCX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DVTLDCamOCXLib::_DDVTLDCamOCX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<DVTLDCamOCXLib::DVTLDCamOCX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<DVTLDCamOCXLib::DVTLDCamOCX*>(t)->DVTLDCamOCXLib::DVTLDCamOCX::~DVTLDCamOCX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) DVTLDCamOCXLib::DVTLDCamOCX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const DVTLDCamOCXLib::DVTLDCamOCX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<DVTLDCamOCXLib::DVTLDCamOCX*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

